#!/bin/bash

# ==================== Color Configuration ====================
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# ==================== Configuration ====================
REQUIRED_VARS=(
    "ANTHROPIC_API_KEY"
    "CLIENT_ID_SWAP_USER"
    "CLIENT_SECRET_SWAP_USER"
    "CLIENT_ID_SWAP_SERVICE"
    "CLIENT_SECRET_SWAP_SERVICE"
)

SWAP_USER_LOCAL_PORT=7576
SWAP_SERVICE_LOCAL_PORT=7577

# ==================== Utility Functions ====================
print_color() {
    echo -e "${1}${2}${NC}"
}

print_header() {
    print_color "$CYAN" "$1"
    print_color "$BLUE" "======================================="
    echo ""
}

print_success() {
    print_color "$GREEN" "✅ $1"
}

print_error() {
    print_color "$RED" "❌ $1"
}

print_warning() {
    print_color "$YELLOW" "⚠️  $1"
}

print_info() {
    print_color "$BLUE" "$1"
}

detect_environment() {
    if [ -n "$REPLIT_DEV_DOMAIN" ]; then
        print_color "$GREEN" "🌐 Running on Replit!"
        print_color "$BLUE" "Domain: $REPLIT_DEV_DOMAIN"
        print_color "$CYAN" "Note: Replit automatically forwards ports as configured in .replit file"
        echo "replit"
    else
        print_color "$YELLOW" "💻 Running locally"
        echo "local"
    fi
}

get_port_for_environment() {
    local service=$1
    local environment=$2
    
    case "$service" in
        "swap_user")
            if [ "$environment" = "replit" ]; then
                echo "3000"
            else
                echo "$SWAP_USER_LOCAL_PORT"
            fi
            ;;
        "swap_service")
            if [ "$environment" = "replit" ]; then
                echo "3001"
            else
                echo "$SWAP_SERVICE_LOCAL_PORT"
            fi
            ;;
    esac
}

# ==================== Environment Setup Functions ====================
ensure_env_file() {
    local needs_update=false
    
    # On Replit, we use Secrets for sensitive data
    # .env is only for non-sensitive runtime settings
    if [ -n "$REPLIT_DEV_DOMAIN" ]; then
        if [ ! -f ".env" ]; then
            print_info "Creating .env file for runtime settings (non-sensitive)..."

            echo "# This file is generated by the setup-and-run.sh script." > .env
            echo "# If you're on Replit, do NOT use this file for sensitive credentials." >> .env
            echo "# Use the Secrets tool in the Tools panel to add your credentials securely." >> .env
            echo "DECODE_JWT=true" >> .env
            echo "NODE_NO_WARNINGS=1" >> .env
            echo "# Note: Use Replit Secrets for sensitive credentials!" >> .env
            echo "# Do NOT put API keys or secrets in this file on Replit." >> .env
            print_success ".env file created with runtime settings"
        else
            # Ensure runtime settings are present but don't touch secrets
            if ! grep -q "^DECODE_JWT=" .env 2>/dev/null; then
                echo "DECODE_JWT=true" >> .env
            fi
            if ! grep -q "^NODE_NO_WARNINGS=" .env 2>/dev/null; then
                echo "NODE_NO_WARNINGS=1" >> .env
            fi
        fi
        return
    fi
    
    # Local environment - normal .env handling
    if [ ! -f ".env" ]; then
        print_warning "Creating .env file..."
        echo "DECODE_JWT=true" > .env
        echo "NODE_NO_WARNINGS=1" >> .env
        print_success ".env file created with required settings"
        return
    fi
    
    print_success ".env file found"
    
    # Check and fix required settings
    local temp_file=$(mktemp)
    echo "DECODE_JWT=true" > "$temp_file"
    echo "NODE_NO_WARNINGS=1" >> "$temp_file"
    
    # Preserve existing variables (except the ones we're setting)
    while IFS= read -r line || [ -n "$line" ]; do
        if [[ ! "$line" =~ ^DECODE_JWT= ]] && \
           [[ ! "$line" =~ ^NODE_NO_WARNINGS= ]] && \
           [ -n "$line" ]; then
            echo "$line" >> "$temp_file"
        fi
    done < .env
    
    # Check if file needs updating
    if ! diff -q .env "$temp_file" > /dev/null 2>&1; then
        print_warning "Updating .env file with required settings..."
        mv "$temp_file" .env
        print_success ".env file updated"
    else
        rm "$temp_file"
    fi
}

load_env() {
    if [ -f ".env" ]; then
        set -a
        source .env 2>/dev/null || true
        set +a
    fi
}

get_missing_vars() {
    local missing=()
    for var in "${REQUIRED_VARS[@]}"; do
        # On Replit, only check environment variables (from Secrets)
        # On local, check both environment and .env file
        if [ -n "$REPLIT_DEV_DOMAIN" ]; then
            if [ -z "${!var}" ]; then
                missing+=("$var")
            fi
        else
            if [ -z "${!var}" ] && ! grep -q "^${var}=" .env 2>/dev/null; then
                missing+=("$var")
            fi
        fi
    done
    echo "${missing[@]}"
}

get_credential_prompt() {
    local var=$1
    case $var in
        "ANTHROPIC_API_KEY")
            echo "Enter your Anthropic API Key:"
            ;;
        "CLIENT_ID_SWAP_USER")
            echo "Enter CLIENT_ID for Swap User:"
            ;;
        "CLIENT_SECRET_SWAP_USER")
            echo "Enter CLIENT_SECRET for Swap User:"
            ;;
        "CLIENT_ID_SWAP_SERVICE")
            echo "Enter CLIENT_ID for Swap Service:"
            ;;
        "CLIENT_SECRET_SWAP_SERVICE")
            echo "Enter CLIENT_SECRET for Swap Service:"
            ;;
    esac
}

prompt_for_credentials() {
    local missing_vars=("$@")
    
    if [ ${#missing_vars[@]} -eq 0 ]; then
        print_success "All required credentials are configured"
        return 0
    fi
    
    print_warning "Missing required credentials!"
    echo ""
    print_info "This demo requires:"
    print_info "• Anthropic API Key for AI capabilities (claude-sonnet model)"
    print_info "• ACK Lab SDK credentials for two agents:"
    print_info "  - Swap User: User agent wanting to swap USDC for SOL"
    print_info "  - Swap Service: Swap service agent that executes the exchange"
    echo ""
    print_info "Get Anthropic API key from: https://console.anthropic.com/"
    print_info "Get ACK Lab credentials from: https://ack-lab.catenalabs.com"
    print_info "For each agent, click 'Create API Key' and copy the credentials when prompted."
    echo ""
    
    # Check if we're on Replit
    if [ -n "$REPLIT_DEV_DOMAIN" ]; then
        print_color "$YELLOW" "🔐 You're running on Replit - Use the Secrets tool for secure storage!"
        echo ""
        print_info "To add credentials securely on Replit:"
        print_success "1. Click the 🔒 'Secrets' icon in the Tools panel (left sidebar)"
        print_success "2. Add each of the following secrets with their exact names:"
        echo ""
        
        for var in "${missing_vars[@]}"; do
            print_color "$CYAN" "   • ${var}"
            case $var in
                "ANTHROPIC_API_KEY")
                    print_info "     Your Anthropic API key from https://console.anthropic.com/"
                    ;;
                "CLIENT_ID_SWAP_USER")
                    print_info "     Client ID for Swap User"
                    ;;
                "CLIENT_SECRET_SWAP_USER")
                    print_info "     Client Secret for Swap User"
                    ;;
                "CLIENT_ID_SWAP_SERVICE")
                    print_info "     Client ID for Swap Service"
                    ;;
                "CLIENT_SECRET_SWAP_SERVICE")
                    print_info "     Client Secret for Swap Service"
                    ;;
            esac
            echo ""
        done
        
        print_warning "⚠️  IMPORTANT: Do NOT use .env file on public Replit projects!"
        print_warning "Public Replit projects expose all files, including .env"
        print_warning "The Secrets tool keeps your credentials secure and private"
        echo ""
        print_info "After adding all secrets, run this script again to continue."
        print_info "Press Enter to exit and add your secrets..."
        read -p ""
        exit 0
    else
        # Local environment - use .env file
        for var in "${missing_vars[@]}"; do
            local prompt=$(get_credential_prompt "$var")
            print_color "$CYAN" "$prompt"
            read -p "> " value
            
            if [ -n "$value" ]; then
                if grep -q "^${var}=" .env 2>/dev/null; then
                    sed -i.bak "s|^${var}=.*|${var}=${value}|" .env && rm .env.bak
                else
                    echo "${var}=${value}" >> .env
                fi
                print_success "${var} saved to .env"
            else
                print_error "${var} is required for the demo to work!"
                print_warning "You can add it manually to the .env file later."
            fi
            echo ""
        done
        
        # Reload environment after updates
        load_env
    fi
}

validate_credentials() {
    local has_missing=false
    for var in "${REQUIRED_VARS[@]}"; do
        if [ -z "${!var}" ]; then
            print_error "${var} is still not set!"
            has_missing=true
        fi
    done
    
    if [ "$has_missing" = true ]; then
        if [ -n "$REPLIT_DEV_DOMAIN" ]; then
            echo ""
            print_warning "📝 Reminder for Replit users:"
            print_info "Use the 🔒 Secrets tool in the Tools panel to add missing credentials"
            print_info "Do NOT add them to the .env file on public Replit projects!"
        fi
        return 1
    fi
    
    return 0
}

# ==================== Installation Functions ====================
install_dependencies() {
    print_info "📦 Installing root dependencies..."
    
    if [ ! -d "node_modules" ] || [ "package.json" -nt "node_modules" ]; then
        print_warning "Running npm install..."
        
        if ! command -v npm &> /dev/null; then
            print_error "npm is not installed. Please install Node.js and npm first."
            exit 1
        fi
        
        npm install
        
        if [ $? -eq 0 ]; then
            print_success "Root dependencies installed successfully"
        else
            print_error "Failed to install dependencies"
            exit 1
        fi
    else
        print_success "Root dependencies are up to date"
    fi
}

# ==================== Service Management ====================
start_agent_servers() {
    print_success "Starting agent servers..."
    npx tsx swap-agents-server.ts 1>&2 &
    echo $!
}

check_agents_status() {
    local max_attempts=5
    local swap_user_running=false
    local swap_service_running=false
    
    for i in $(seq 1 $max_attempts); do
        if curl -f -s http://localhost:${SWAP_USER_LOCAL_PORT} > /dev/null 2>&1; then
            swap_user_running=true
        fi
        if curl -f -s http://localhost:${SWAP_SERVICE_LOCAL_PORT} > /dev/null 2>&1; then
            swap_service_running=true
        fi
        
        if [ "$swap_user_running" = true ] && [ "$swap_service_running" = true ]; then
            print_success "Both swap agent servers are running!"
            return 0
        fi
        
        sleep 1
    done
    
    print_warning "Swap agent servers may still be starting..."
    return 1
}

display_endpoints() {
    local environment=$1
    local swap_user_port=$(get_port_for_environment "swap_user" "$environment")
    local swap_service_port=$(get_port_for_environment "swap_service" "$environment")
    
    print_info "\nSwap Agent Server Endpoints:"
    
    if [ "$environment" = "replit" ]; then
        print_warning "Port forwarding on Replit:"
        print_color "$CYAN" "  • Local port $SWAP_USER_LOCAL_PORT → External port $swap_user_port"
        print_color "$CYAN" "  • Local port $SWAP_SERVICE_LOCAL_PORT → External port $swap_service_port"
        echo ""
        print_success "  • Swap User: https://$REPLIT_DEV_DOMAIN:$swap_user_port"
        print_success "  • Swap Service: https://$REPLIT_DEV_DOMAIN:$swap_service_port"
    else
        print_success "  • Swap User: http://localhost:$swap_user_port"
        print_success "  • Swap Service: http://localhost:$swap_service_port"
    fi
}

# ==================== Demo Functions ====================
run_tutorial() {
    print_success "\n🎓 Starting Interactive Tutorial..."
    print_warning "This tutorial will guide you through ACK-Lab's rule system."
    print_warning "You'll learn how to protect your automated transactions with rules."
    print_color "$CYAN" "Follow the step-by-step instructions to complete the tutorial.\n"
    
    npx tsx cli-demos/swap-demo.ts
}

run_cli_demo() {
    print_success "\n🚀 Starting CLI Demo (Free-form mode)..."
    print_warning "You can request USDC to SOL swaps directly from the command line."
    print_warning "Example: 'swap 25 USDC for SOL'"
    print_warning "Type /exit to quit the CLI demo and return to this menu."
    print_color "$CYAN" "Or use Ctrl+C to force exit the demo.\n"
    
    SKIP_TUTORIAL=true npx tsx cli-demos/swap-demo.ts
}

display_menu() {
    print_info "🎮 Choose how to interact with the demo:"
    print_success "  1. Tutorial - Interactive ACK-Lab rules tutorial (RECOMMENDED)"
    print_success "  2. CLI Demo - Free-form command-line interface"
    print_success "  3. Exit - Stop the demo"
    echo ""
    print_warning "💡 Tip: You can force exit at any time with Ctrl+C"
    echo ""
}

display_post_action_menu() {
    local last_action=$1
    echo ""
    print_info "${last_action} finished. What would you like to do next?"
    print_success "  1. Tutorial - ${last_action:=Tutorial ? Run : Learn about rules}"
    print_success "  2. CLI Demo - ${last_action:=CLI Demo ? Run again : Try the command-line interface}"
    print_success "  3. Exit - Stop the demo"
    echo ""
}

cleanup_and_exit() {
    local agents_pid=$1
    
    print_warning "\n👋 Shutting down..."
    
    if [ -n "$agents_pid" ]; then
        kill $agents_pid 2>/dev/null
        print_success "Agent servers stopped"
    fi
    
    print_info "Thanks for trying the USDC to SOL Swap Demo!"
    print_color "$CYAN" "\n📖 Quick Reference:"
    print_color "$CYAN" "  • Exit shortcut: Ctrl+C (works on all platforms: Windows/Linux/Mac)"
    print_color "$CYAN" "  • Restart demo: Run ./setup-and-run.sh again"
    print_color "$CYAN" "  • Documentation: Check README.md for more details"
    print_color "$CYAN" "  • Price feeds: Powered by Pyth Network (https://pyth.network)\n"
    exit 0
}

# ==================== Main Execution ====================
main() {
    # Initial setup
    print_header "💱 USDC to SOL Swap Demo Setup"
    
    # Setup environment
    ensure_env_file
    load_env
    
    echo ""
    print_info "🔧 Checking required credentials..."
    
    # Check and prompt for missing credentials
    local missing_vars=($(get_missing_vars))
    prompt_for_credentials "${missing_vars[@]}"
    
    # Validate all credentials are set
    if ! validate_credentials; then
        print_error "Cannot start demo without all required credentials."
        if [ -n "$REPLIT_DEV_DOMAIN" ]; then
            print_warning "Please add the missing credentials using the Replit Secrets tool and run this script again."
            print_info "Click the 🔒 Secrets icon in the Tools panel to add your credentials securely."
        else
            print_warning "Please add the missing credentials to your .env file and run this script again."
        fi
        exit 1
    fi
    
    # Install dependencies
    echo ""
    install_dependencies
    
    # Detect environment
    echo ""
    local environment=$(detect_environment)
    
    # Start services
    echo ""
    print_info "🎯 Starting USDC to SOL Swap Agents Server..."
    print_warning "This will start two swap agent servers:"
    
    if [ "$environment" = "replit" ]; then
        print_warning "• Swap User: Port $SWAP_USER_LOCAL_PORT (accessible via port 3000) - Wants to swap USDC for SOL"
        print_warning "• Swap Service: Port $SWAP_SERVICE_LOCAL_PORT (accessible via port 3001) - Executes the swap using Pyth price feeds"
    else
        print_warning "• Swap User: Port $SWAP_USER_LOCAL_PORT - Wants to swap USDC for SOL"
        print_warning "• Swap Service: Port $SWAP_SERVICE_LOCAL_PORT - Executes the swap using Pyth price feeds"
    fi
    echo ""
    
    local agents_pid=$(start_agent_servers)
    sleep 3
    check_agents_status
    
    # Display service information
    display_endpoints "$environment"
    
    echo ""
    print_info "💱 Swap Demo Features:"
    print_color "$CYAN" "  • Real-time SOL/USD pricing from Pyth Network"
    print_color "$CYAN" "  • USDC payments via ACK Lab SDK"
    print_color "$CYAN" "  • Simulated DEX swap execution"
    print_color "$CYAN" "  • SOL delivery to the wallet"
    
    # Main interaction loop
    echo ""
    display_menu
    
    while true; do
        read -p "$(print_color "$CYAN" "Enter your choice (1/2/3): ")" choice
        
        case $choice in
            1)
                run_tutorial
                display_post_action_menu "Tutorial"
                ;;
            2)
                run_cli_demo
                display_post_action_menu "CLI Demo"
                ;;
            3)
                cleanup_and_exit "$agents_pid"
                ;;
            *)
                print_error "Invalid choice. Please enter 1, 2, or 3."
                ;;
        esac
    done
}

# Run main function
main
